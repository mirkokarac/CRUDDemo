# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
    - releases/*
    - feature/*

pr:
  branches:
    include:
    - master
    - releases/*
    - feature/*    

  # see https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#ci-triggers on how to add exclude and paths

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'ff1866f0-cd5e-4c01-8a13-27f43d0dfaa5'

  # Function app name
  functionAppName: 'CRUDDemo'

  # Agent VM image name
  vmImageName: 'vs2017-win2016'

  # Environment name
  environment: 'development'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/$(functionAppName)'

  # Check if branch is main
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]  

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj

- stage: Test
  displayName: Test stage

  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(workingDirectory)/test_output --configuration Test --collect "Code coverage"'

- stage: Pack
  displayName: Pack stage
  condition: and(succeeded(), eq(variables.isMain, 'true'))

  jobs:
  - job: Pack
    displayName: Pack
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NuGetCommand@2
      inputs:
        command: 'pack'
        packagesToPack: $(workingDirectory)/*.csproj
        packDestination: '$(Build.ArtifactStagingDirectory)'

- stage: Push
  displayName: Push stage
  condition: and(succeeded(), eq(variables.isMain, 'true'))

  jobs:
  - job: Push
    displayName: Push
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
        feedsToUse: 'config'
        nugetConfigPath: '$(workingDirectory)/NuGet.config'

- stage: Publish
  displayName: Publish stage
  condition: and(succeeded(), eq(variables.isMain, 'true'))

  jobs:
  - job: Publish
    displayName: Publish
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: 'publish'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(workingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop        

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isMain, 'true'))

  jobs:
  - deployment: Deploy
    dependsOn: Build
    displayName: Deploy
    environment: '$(environment)'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'